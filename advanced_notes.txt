Automatic Variable :
	- storage classes used to describe the features of variable/function 
		* include the scope , visibility and lif-time
		* help to trace the existence of a particular variable during runtime of program
	-The lifetime of variable is the time period during which variable exist in computer memeory 
		* some exist briefly , some are repeatedly created and destroyed , and others exist for the entire excution of program	
	- The scope of variable is where the variable can be referenced in program 
	
	- C provide four storage classes , indicate by their storage  calss specifiers
		* auto 
		* register 
		* extern
		* Static
	
	-The four storage class can be :
		* automatic storage duration 
		* static storage duration
		
    - All local variable have automatic storage
	- EXTERNAL : extern variable can be acces between two files
	- static varibale should not decalte inside a strcuture
		- if we need to define a globale varible whose value not to be accessed from another files we declare it as STATIC
	
##HEAP and STACK
		- There is 3 forms of memeory that you can use in program :
			* static 
			* stack
			* heap 
		Stack : is special region of memeory that store temporary variable 
			* used to store variable that at created inside a function 
			* easier to keep track of because the memory is only locally available in the function 
			* managed by CPU 
			* Grows and shrinks as variable are created destroyed inside function
			* There is limit of variable can be stored in the stack
			* If a program tries to put too much information on the stack, stack overflow will ocuur 
			* over flow can occurs in situations where recursion is incorrectly used 
			* stack variable only exist while the function that created them is runnig 
			* Local variable only
			* variable cannot be resize
			
			
		Heap : 
			* opposite of stacks 
			* a hierarchical data structure 
			* The heap is a large pool of memeory that can be used dynamically 
			* memory is not automaticaly managed 
			* The heap managed by the programmer 
			* The memory is acces by pointer
			* variable can acces globaly 
			* no limit on memeory size
			* programmer reponsible tomanage memeory 
			* variable can be resize using realloc()
			
		The define #:
			* Way to tell the compiler sonthings and run before the compiler 
			* Ex: 	#define Yes 1
					#define TWO_PI 2.0*3.14
					#define NULL 0
			* Help to make the programm more readly extendable and readable
			* Deference between constant and define is 
					#define Pi 3.14f
					const float Pi =3.14  ( is better we d'nt need to verify the type)
			* #define not handler by compiler 
	
	
		Typedef:
			* Allow to create new type name
			* Add readability 
			* make program portable
			* typedef counter  <==> #define counter
			* typedef is handled by complier 
			* typedef does not define a new type only new type name
			* Best partice:
				- use typedef for type that cobine arrays , pointer, or functions
				- use typedef for portable type
				- use typdef for casting :typedef int(*ptr_to_fun)(void)    char *p= ptr_to_fun;

		
		Variable Length Array:
			* not used 
			
			
			
			
#####Type qualifiers:
			const , volatile, strict (c99)
		
		const :
			* used for with variable whose value will not be change by teh program
			* Compiler place the const in Read only memeory 
			* example : 
					const float  *pf //pf point to a constant value
					float * const pt /// pt is const pointer  ( adress not chnage =)
					const float * cont ptr ; // both constant ( pointer and variable);
					float cosnt *ptr // same as const float *ptr
					
			*#define is preprocessor directive while cosnt is keyword 
			* using const than used #define macro because const variable provide type checking by complier
			
		volatile:
			* Tell the compiler explicity that the specified variable will change the value
			* the program tell the compiler to supress various kinds of optimizations
			* volatile is tell the  compiler that this value may change at any time
			* 3 types of variable should use volatile 
				@ memeory-mappped peripheral registers
				@ globale variable (no stack variable ) modified by intterup service routine 
				@ global variable accesed by multiple task
			 
					ex: 
					volatil int loc1  /* loc is volatile locatiojn*/
					volatile  * ploc /*ploc point to volatile location */
			
			
Basic of C dat type : 
				BIT				bool		1		0 to 1
				byte			char		8		-128 to 127
				word 		 	short int 	16		-32768	to 32767
				long 			log int 			-2147483648	to 2147483674
				
			
Negative number (signed)	: use two complment notation
						  The leftmost bit represent the sign bit 
							*	if 1 is Negativ
							*	if 0 is Positive
							*	The remain bits represent the value  
			
Bit manipulation :
						* Bit swap :
									short int w1 =150;
									short int w2 =61;
									short temp =0
									/*swap */
									temp = w1;
									w1   = w2;
									w2=temp;
									
									//swap using bit
									w1^=w2;
									w2^=w1;
									w1^=w2;
						negativ ;
							w1=2
							result =~(w1) /// -2
			
			
			
Bitmask                 *Used to manipulate the bits of an integer
						* checking if particular bit value are presentt or not 
						*setting bit on or off
						*apply mask to a value to set or read 
						example : 
								Turning bit On (Settig bits) using OR
								
								Toogling Bit using XOR
								
								Checking the value of bit 
									if(flag==MASK)
										puts(OK);
						
Bit operator to pack data :	
						* Use the bitwise or bitfield
						*



Using bit field  	:
					* 
			
			
			
			
Union 	





########Advenced concept of function :
							
		Variadic: 	*   Dealing with unknown number of arguments for a functions
					*	Used of variadic function when we do not know the number of argument 
					*	Varidic function contribute to the flexibility of the program that are devloping
					*	Example is printf function
					*	Two part:	
							*Mnadatory argument 
							*Optional argument
							* example: printf - The mandatory argument ("The one number %d")
											  - The optional comes second and could be different (nOneNumber)	
					
					*	va_list : need to access to optional parameter 
					*	va_star : to connect argument list to argument pointer  		
					* 	va_arg  : fetch teh current argument connected to the argument list 
					*	va_end	: used in situation when would like to stop using are variable argument lis (cleanup)
					*	va_copy	: used in situation for wich we need to save our current location 
				
				example:
				step1: voidf1(int,...);//valide	
				step2: creat va_list variable
						
			
			
	Recursion function : 		
			
			
			
			

inline function : 
				* implmented an ddeclared in header file 
				* can replace the macro function
				* usualy the compiler will substitute code of the function into caller
				* The program no longer call that funtion, the compiler replaces every call to inline function with the code body of that function
				* inline is internal linkage 
				* inline is used only for efficienty and speed of program
				

The preprocessor 
				* incldue guards : #ifndef  #define  ....#endif 
				* #undef  to earlier #define definition 
				* #paragma:
							#pragama token_name





The Macro 		* #define PX printf("x is %d.\n",x)
				
				Macro Vs function : 
							- Macro is preprocessor this mean is processed before the program compile 
							-
								

 