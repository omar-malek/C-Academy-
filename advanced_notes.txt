Automatic Variable :
	- storage classes used to describe the features of variable/function 
		* include the scope , visibility and lif-time
		* help to trace the existence of a particular variable during runtime of program
	-The lifetime of variable is the time period during which variable exist in computer memeory 
		* some exist briefly , some are repeatedly created and destroyed , and others exist for the entire excution of program	
	- The scope of variable is where the variable can be referenced in program 
	
	- C provide four storage classes , indicate by their storage  calss specifiers
		* auto 
		* register 
		* extern
		* Static
	
	-The four storage class can be :
		* automatic storage duration 
		* static storage duration
		
    - All local variable have automatic storage
	- EXTERNAL : extern variable can be acces between two files
	- static varibale should not decalte inside a strcuture
		- if we need to define a globale varible whose value not to be accessed from another files we declare it as STATIC
	
##HEAP and STACK
		- There is 3 forms of memeory that you can use in program :
			* static 
			* stack
			* heap 
		Stack : is special region of memeory that store temporary variable 
			* used to store variable that at created inside a function 
			* easier to keep track of because the memory is only locally available in the function 
			* managed by CPU 
			* Grows and shrinks as variable are created destroyed inside function
			* There is limit of variable can be stored in the stack
			* If a program tries to put too much information on the stack, stack overflow will ocuur 
			* over flow can occurs in situations where recursion is incorrectly used 
			* stack variable only exist while the function that created them is runnig 
			* Local variable only
			* variable cannot be resize
			
			
		Heap : 
			* opposite of stacks 
			* a hierarchical data structure 
			* The heap is a large pool of memeory that can be used dynamically 
			* memory is not automaticaly managed 
			* The heap managed by the programmer 
			* The memory is acces by pointer
			* variable can acces globaly 
			* no limit on memeory size
			* programmer reponsible tomanage memeory 
			* variable can be resize using realloc()
			
		The define #:
			* Way to tell the compiler sonthings and run before the compiler 
			* Ex: 	#define Yes 1
					#define TWO_PI 2.0*3.14
					#define NULL 0
			* Help to make the programm more readly extendable and readable
			* eg : #define teh array size  array[defined_value] 
			
			* Deference between constant and define is 
					#define Pi 3.14f
					the define here is a symbol the is to  replaced in the code
					* wehne we use define , PI is just sequence of character that replace all occurence in the code
					const float Pi =3.14  ( is better we d'nt need to verify the type)
			* #define not handler by compiler ode
			
	
	
		Typedef:
			* Allow to create new type name
			* Add readability 
			* make program portable
			* typedef counter  <==> #define counter
			* typedef is handled by complier 
			* typedef does not define a new type only new type name
			* Best partice:
				- use typedef for type that cobine arrays , pointer, or functions
				- use typedef for portable type
				- use typdef for casting :typedef int(*ptr_to_fun)(void)    char *p= ptr_to_fun;

		
		Variable Length Array:
			* not used 
			
			
			
			
#####Type qualifiers:
			const , volatile, strict (c99)
		
		const :
			* used for with variable whose value will not be change by teh program
			* Compiler place the const in Read only memeory 
			* example : 
					const float  *pf //pf point to a constant value
					float * const pt /// pt is const pointer  ( adress not chnage =)
					const float * cont ptr ; // both constant ( pointer and variable);
					float cosnt *ptr // same as const float *ptr
					
			*#define is preprocessor directive while cosnt is keyword 
			* using const than used #define macro because const variable provide type checking by complier
			
		volatile:
			* Tell the compiler explicity that the specified variable will change the value
			* the program tell the compiler to supress various kinds of optimizations
			* volatile is tell the  compiler that this value may change at any time
			* 3 types of variable should use volatile 
				@ memeory-mappped peripheral registers
				@ globale variable (no stack variable ) modified by intterup service routine 
				@ global variable accesed by multiple task
			 
					ex: 
					volatil int loc1  /* loc is volatile locatiojn*/
					volatile  * ploc /*ploc point to volatile location */
			
			
Basic of C dat type : 
				BIT				bool		1		0 to 1
				byte			char		8		-128 to 127
				word 		 	short int 	16		-32768	to 32767
				long 			log int 			-2147483648	to 2147483674
				
			
Negative number (signed)	: use two complment notation
						  The leftmost bit represent the sign bit 
							*	if 1 is Negativ
							*	if 0 is Positive
							*	The remain bits represent the value  
			
Bit manipulation :
						* Bit swap :
									short int w1 =150;
									short int w2 =61;
									short temp =0
									/*swap */
									temp = w1;
									w1   = w2;
									w2=temp;
									
									//swap using bit
									w1^=w2;
									w2^=w1;
									w1^=w2;
						negativ ;
							w1=2
							result =~(w1) /// -2
			
			
			
Bitmask                 *Used to manipulate the bits of an integer
						* checking if particular bit value are presentt or not 
						*setting bit on or off
						*apply mask to a value to set or read 
						example : 
								Turning bit On (Settig bits) using OR
								
								Toogling Bit using XOR
								
								Checking the value of bit 
									if(flag==MASK)
										puts(OK);
						
Bit operator to pack data :	
						* Use the bitwise or bitfield
						*



Using bit field  	:
					* 
			
			
			
			
Union 	





########Advenced concept of function :
							
		Variadic: 	*   Dealing with unknown number of arguments for a functions
					*	Used of variadic function when we do not know the number of argument 
					*	Varidic function contribute to the flexibility of the program that are devloping
					*	Example is printf function
					*	Two part:	
							*Mnadatory argument 
							*Optional argument
							* example: printf - The mandatory argument ("The one number %d")
											  - The optional comes second and could be different (nOneNumber)	
					
					*	va_list : need to access to optional parameter 
					*	va_star : to connect argument list to argument pointer  		
					* 	va_arg  : fetch teh current argument connected to the argument list 
					*	va_end	: used in situation when would like to stop using are variable argument lis (cleanup)
					*	va_copy	: used in situation for wich we need to save our current location 
				
				example:
				step1: voidf1(int,...);//valide	
				step2: creat va_list variable
						
			
			
	Recursion function : 		
			
			
			
			

inline function : 
				* implmented an ddeclared in header file 
				* can replace the macro function
				* usualy the compiler will substitute code of the function into caller
				* The program no longer call that funtion, the compiler replaces every call to inline function with the code body of that function
				* inline is internal linkage 
				* inline is used only for efficienty and speed of program
				

The preprocessor 
				* incldue guards : #ifndef  #define  ....#endif 
				* #undef  to earlier #define definition 
				* #paragma:
							#pragama token_name





The Macro 		* #define PX printf("x is %d.\n",x)
				
				Macro Vs function : 
							- Macro is preprocessor this mean is processed before the program compile 
							- trade of use is time and space
							- The macro is faster than function 
							- function take longer than inline code
							- Macro inside nested loop is much beter candidate for speed improvments 
							- when call function we alocate some data allocate stack frame
							- macro insert code directly into program (textual substitution)
							- macro produce inline code
							- if we use same macro 20 times, we get 20 line of code inserted 
							- if we use a function 20 times, we juste one copy of the function statments in programm
							- function is type checking 
							- macro not easy to debug 
							- alternative of macro is inline function 
								

Predefined Macro			__FILE__: the current file name ( string)
							
							__LINE__: line number of the current source code 
							
							__func__: the name of any function when placed inside a function of the current file 
							
							__DATE__: the date the source file was compiled ( string  Mmm dd YYY )
							
							__TIME__: the time teh souce file was compiled 







Profiling      			Dynamique program analysis that measure
							* Space memeory
							* Time complexity of program ( efficienty)
							* Usage of particular instruction 
							* The frequency and the duration of function calls
							* profile help for optimizations
							example :  tool gprof





static analysis 		methode of debuging by automaticaly examining source code before a program is run 
							* the analysis adress the the weakness in the source code that might lead to vulnurabilities
							* analysis is often performed by an automated tool ( much more effective than code review)
							
						Static analysis vs Dynamic Analysis 
							* static identifies defects before run program
							* dynamic analysis idetifies defect after run program
							


advanced us eof pointer :
						* used whne we need to change the value of the pointer passed to a function as the function arguments 
							* simulate pass by reefernce 
							*in c every things is passed by copy 
							* if we pass a signe pointer in as argument we modify the local copie of pointer and not the origonal pointer in the calling scope
							* with pointer to pointer we modify the original pointer 
						* pointer of pointer 
							int **var;
							intx =**var;
						Where we use double pointer :
							- used when you need to change the value of the pointer passed to a function as function argument
							- with pointer with pointer you can modify the original pointer 
							-when we passe pointer as function argument we modify the copie only 
							- when we use pointer of pointer we modify the original pointer and not the copy 
										




Function pointer   :	* use pointer to point to a function
						* pointer to function can be :
							- passed to functions
							- return from function
							- stored in arrays
							- assigned to other function pointers
						* A function pointer can be used directly as The function name when calling the function 
						* Common Use Case:
								- used as an argument to anothers function 
								- menu driven system
								- replace switch/if statament
								- realize your own late-binding
								- implment callbacks 
						*pointer to a function store the adress for teh start of the function code
								@ we need also to know the number and type of argument and the type of return 
								@compiler can not deduce this information just from teh adress of the function
						*function pointer hold and adress and must also define a prototype
						
						*pointer of function dereference to use the function 		
								
						ex : int(*pfunction)(int)	
						*for each pointer of function you need to decalre a pointer 
						*to set a function pointer to an existing specific function , you simply assign the name of the function to it 
							example :
											int(*pfunction)(int);
											int loockup(int);
											pfunction = lookup; or    pfunction=&loockup,
						* writing a function name without a subsequent se of parentheses
						
						* invocation :
							- int value =pfunction(5)
							
						*  we can hide the complexity of function by define it as type defect	
							- example : 
										typedef int (*funptr)();
										the identifier funptr is synonym for the type of a pointer to function that take no argument and return an integer 
										


										
Void pointer :      	
						* void pointer hase no data type 
						* to deferenciate teh void pointer you must to do cast
						* example : 
									void *vp;
									int a =100;
									vp=&a;
									
									to deferenciate we apply type caste after we deferenciate:  *(int*)vp;
						* type casting changes type of vp temporary until the evaluation of the expresion , everywhere else in the prorgam
							vp still void pointer 
									
						
  
  
Standard Library 		* When c program is compiled, the compiler generate the object code (.o or .obj)
						* after generate the object code teh compiler invokes teh liker
						* linking is the process of collecting and combining multiple object files in order to create a single excutable file 
						* one of the main task of linker is to make the code of library function (eg printf, scan().....etc) available for your program
						* a linker can acomplish this task in two way :
								- By copying the code of library function to your object code 
								- by making some arrangments so that the complet code of library function is not copied , but made available at run time 
						
						* static linking is the result of teh linker making copy of all used library function to the excutable file
						* Dynamique linking does not require the code to be copied , is done by just placing the name of library in the binary file 
							*linking happen when the program run , when both binary file and the library file are in the memory
						
						STATIC LINKING:
						* when you link application to another library at compile time , the library code is part of you application 
						* the advantage is the speed
						* create large binary files need more space 
						* one linking you can't modify , you need to rebuild ( time cosuming) to fix bug
						
						DYNAMIC LINKING:
						* Library is loaded in the memeory when teh program start 
						
						LIBRARY CONVENTION:
						* Dynamic library are called lib somthing.so  (libthread.so)
						* Static library  are called lib somtings.a    (libname.a)  equivalent .lib in windows 
						*
						
						
						
ASSERT LIBRARY 		
						*The assert library is designed to help with debugingusing for debuging programe
							-defined in assert.h
						* The assert() marcro enable you to insert tests of arbitrary expression in your program
							- a run-time check
						*takes as its argument an integer expresion
							- the argument is relational or logical expresion 
						*The program will be terminated with diagnostic message if a specified expresion is false during excution 
							- error message is writen to the standard error stream(stderr)
								- display the test that failed , the name of the file containing the test , and a line number 
							- abort() function in invoked wich terminates the program
						assertion are often used for critical condition in a program
							* if certain condition are not met , disaster will occur 
							*you would want to be sure that the program does not continue when error occurs
						assertion are not meant as subtitute for error handling during normal runtime condition 
							* use should be limited to finding logic error 
							
						* you can switch of ass but #define NDEBUG  before #include <assert.h>	
  
  
  
						Compile time assertion :
							* can cause a program not to compile 
							* enable error message during compilation 
						
  
  
  
Data struccture: 		- Define a new data type
						- Abstract definition of data type 
		

					ADT :
						* Linked List
						* Stacks
						*Queue
						*Binary trees
					Operation add, insert , delete, retrn the sizer is Empty , dispaly 
					
					Stack :  push and add , pop and remove , peep, size 
					Queue : enque , fio , dequeue peek , size 
					binary tree : ansert , delete , search, size()
					
Linked list 		: abstract data struccture
							- store a lot of different kind of data
							- it is linear data structure
							- it is sequence of data structure  wich are connected toghether via lonk/nodes
							- there are different types of linked list 
								* single linked list 
									can only parsed in one -way 
								*doubly linked list 
									previous and next pointer , can be travarsed forward and backward 
							- linked list are dynamic : le length of a list can increase or decrease as necessary
							- a linked list can be used when the number of data elements to be represented in data structure is unpredictable
							- a node/link can contain data of any type including others struct object
							-linked list can be maintained in sorted order by inserting each new element at the proper point of list 
							
							- The link pointer in the last node of list is set to NULL to mark the end of the list 
							

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  