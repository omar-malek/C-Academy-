Ternary statement:
tackes three operand
Conditions ? expression1: expression2
x= y>7 ? 25 : 50   means result set to 25 if y is greater than 7, or to 50 otherwise



many if else ==> use switch


for syntax:
for (start condition; continuation condition; action_per_condition)
		Loop statement;
The condition can be multiple




While and For loop choos
		-While loo is beter for logic controlled
		- For loop is beter for counter control loop


Break is often used to leave a loop when there are two seperate reasons to leave 



--Array 

// multidimentional array
int number[3][4]={
					{10,20,30,40},
					{10,20,30,40},
					{10,20,30,40}
				};
					
you need three nested loop to process 3 dimetional array 

## String 
strchr()
strstr() ---> most usuful 
Tokenization a string 
strtok()

analuzing string :
islower()
isdigit()
.......

## Pointer

use the asterisk to dereference the pointer 
 *pNumber = 25 
  int * pNumber ;
  pNumber =&Variable;
  
 
  

## debug techniques
commun problem 
	- Logic error
	- Syntax Error
	- Memory Corruption
	- Performance/scalability
	- Lack of Cohesion  ( funsction do much)
	- Tight Coupling ( dependecies) 
	- 
Debuging process: 
	- understand the problem
	- reproduce the problem
		- intermittent 
		
	- Simplify the problem/ devide and conquer / isolate teh source
		- Remove parts of the original test case
		- Comment out the code / back out changes
		- Turn a large program into a lot of small programs (unit testing)
	- identify teh origine of the problem (in the code).
		-USe debuggin too if necessary 
	
	- Slove the problem
		-Experience and practice
		- some include redesign and refactore of the code 
	TEst TEst Test
	
Technique and tool :
		- Tracing/using print statements 
			- output the value of variable at certain point of the progam
			- Show the flow of the excution 
			- Can help to isolate the error 
	    - Debugguer  : monitor the excution stop and restart , set breakpoint and watch variable 
		-Log file : can be used for analysis , add "good" log statements to the code
		- Monitoring the software: run time analysis of memory usage, network traffic, thread and object information
		- exception handling helps a great deal to identify catastrophic errors,
	
		- Static analyzers: analyse teh source code for specific set of known problems
			* Sementic checker, does not analyze syntax
			* Can detect things like uninitialized variable, memory leaks, unereachable code, deadlocks, or race condition 
		
		-Test suite - run a set of comprehensive system end-to end test 
		  - make test every time you need to build a release
		
		
		-Debug the progarm after it has crashed 
			* Analyze the call stack 
			* Analyse memeory dump (core file)
			
Preveting Error:

	- Write high quality code ( folow good design principle and good programming practices)
	- unit test - automatically excuted when compiling 
		* Help avoid regresion
		* Find error in new code before it is delivered 
		* TDD ( Test Driven devlopment)
		
	-Provide good documentation and proper planning( write down design on paper and utlize pseudocode)
	
	- Work in step and constantly test after each step
		* Avoid too many change at once
		* When making change, apply them incremetally ,add one change, test then thoroughly before starting teh next step
		* Help to reduce teh possible source of bugs , limits problem set
		


call stack  :  genereted when application crash 


-Commun  mistakes

text ='a'
		* single character is assigne to text 
text ="a"
		* a pointer to the character string "a" is assigned to the text 
		
		
## Understanding compiler error 
	-   use option  -Wall  ---> compiler show every things 



		
			
			
		
			
	
	
	
	
	
	
	









 