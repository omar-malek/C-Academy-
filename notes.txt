Ternary statement:
tackes three operand
Conditions ? expression1: expression2
x= y>7 ? 25 : 50   means result set to 25 if y is greater than 7, or to 50 otherwise



many if else ==> use switch


for syntax:
for (start condition; continuation condition; action_per_condition)
		Loop statement;
The condition can be multiple




While and For loop choos
		-While loo is beter for logic controlled
		- For loop is beter for counter control loop


Break is often used to leave a loop when there are two seperate reasons to leave 



--Array 

// multidimentional array
int number[3][4]={
					{10,20,30,40},
					{10,20,30,40},
					{10,20,30,40}
				};
					
you need three nested loop to process 3 dimetional array 

## String 
strchr()
strstr() ---> most usuful 
Tokenization a string 
strtok()

analyzing string :
islower()
isdigit()
.......

## Pointer

use the asterisk to dereference the pointer 
 *pNumber = 25 
  int * pNumber ;
  pNumber =&Variable;
  
 
  

## debug techniques
commun problem 
	- Logic error
	- Syntax Error
	- Memory Corruption
	- Performance/scalability
	- Lack of Cohesion  ( funsction do much)
	- Tight Coupling ( dependecies) 
	- 
Debuging process: 
	- understand the problem
	- reproduce the problem
		- intermittent 
		
	- Simplify the problem/ devide and conquer / isolate teh source
		- Remove parts of the original test case
		- Comment out the code / back out changes
		- Turn a large program into a lot of small programs (unit testing)
	- identify teh origine of the problem (in the code).
		-Use debuggin tool if necessary 
	
	- Slove the problem
		-Experience and practice
		- some include redesign and refactore of the code 
	TEst TEst Test
	
Technique and tool :
		- Tracing/using print statements 
			- output the value of variable at certain point of the progam
			- Show the flow of the excution 
			- Can help to isolate the error 
	    - Debugguer  : monitor the excution stop and restart , set breakpoint and watch variable 
		-Log file : can be used for analysis , add "good" log statements to the code
		- Monitoring the software: run time analysis of memory usage, network traffic, thread and object information
		- exception handling helps a great deal to identify catastrophic errors,
	
		- Static analyzers: analyse teh source code for specific set of known problems
			* Sementic checker, does not analyze syntax
			* Can detect things like uninitialized variable, memory leaks, unereachable code, deadlocks, or race condition 
		
		-Test suite - run a set of comprehensive system end-to end test 
		  - make test every time you need to build a release
		
		
		-Debug the progarm after it has crashed 
			* Analyze the call stack 
			* Analyse memeory dump (core file)
			
Preveting Error:

	- Write high quality code ( folow good design principle and good programming practices)
	- unit test - automatically excuted when compiling 
		* Help avoid regresion
		* Find error in new code before it is delivered 
		* TDD ( Test Driven devlopment)
		
	-Provide good documentation and proper planning( write down design on paper and utlize pseudocode)
	
	- Work in step and constantly test after each step
		* Avoid too many change at once
		* When making change, apply them incremetally ,add one change, test then thoroughly before starting teh next step
		* Help to reduce teh possible source of bugs , limits problem set
		


call stack  :  genereted when application crash 


-Commun  mistakes

text ='a'
		* single character is assigne to text 
text ="a"
		* a pointer to the character string "a" is assigned to the text 
		
		
## Understanding compiler error 
	-   use option  -Wall  ---> compiler show every things 
	- fix the fisrt error in order 
	
	commun compiler message: 
	- "Variable undeclared "
	- "implicit declaration of function"  == missing function prototype
	- "control reaches the end of non-void function "
		* when function has been defined as returning a result but no return statement has been included to return this result
		* either the function is incorrectly defined or the statement is missing 
	- "unused variable"
		* remove the declaration
	-"undifined refernce to "
		* when there is function invoked ine the code that has not been defined anywhere 
		* compiler is telling  us that there is a refernce to a function with no definition 
		* check with function is missing and make sure its definition is compiled 

	-error "conflicting type for "...""
		* Two definitions of function prototype have been found 
		* one is the prototype
	
##run time error
		- Segementation fault 
		- analyse the core file and call stack





##Pointer ###############################
			-Pointer store memory adress and not data type 
			- pointer is variable holde the adresse of variable 
Advantage of pointer :
		- With pointer dynamic memory can be created according to the programe use 
		- we can save memeory from static ()
		- pointer allow us to get multiple values from the function 
			* a function can retun 	only one value but by passing arguments as pointers we ca get more than one value from pointer 
		- With pointer dynamic memory can be created according to the programe use  
			* we save memory from static ( compile time) declaration 
		- pointer allow us to design and develop complex data structure like stack, queue, or linked list
		- Pointer provide direct memory acces ( fast , efficient )  
			
	Declare pointer as : int *pointer
		- dangerous when not initialized
		- We should always initialize a pointer a pointer when you declare it ====>   int *pnumber =NULL;
	
	
	Accesing to pointer :
	  We use the indirection operator , * , to acces the value of the variable pointed by a pointer 
		  always referred to as the deference operator 
		int number =15;
		int *pointer=&number;
		int result =0;
		result =*pointer+5 //= 15+5
	- %p represent format specific of pointer   print( pnumber  %p, pnumber) // display the adrees 
	-  example: 
			int number=0;
			int  *pnumber =NULL; 
			number  =10;
			pnumber =&number;
			print ("pnumber's value %p:"&number) // output the adress
			print ("pnumber's value %p:"(void*)&pnumber) // output the adress
		The pointer value is an adrees point to value 
			
			
USE Of pointer-----------------------
		- Assign adress to pointer 
		- You can dereference teh pointer using * and giv ethe value stored in pointed to location 
		- you can take pointer adress &
		- you can perfome the pointer arithmetic (used to read array by increment an decrement)
		- 
		- when we use scanf() to input value we used & operator to obtain the adress of the variable 
		- Testing for NULL : do not deference an uninistialized pointer 

	Const and pointer 
		- when you point to constant this mean 
				*long value =999L
				*const long *pvalue =&value // in this case you can't modify the value using pointer 
		- To ensure that adrees stored in pointer cannot change:
			    - int count=43;
				   int* const pcount=&count ; //  never you can change teh adrees stireed in pointer 
		    ex:
			int item=25
			const int* const pitem=&item;// evry things is constant
	
	Void pointer :	
		- a pointer of type void* can contain the adress of data item on any type
		   - void *ptr ===> you can assigned to any variable type 

	array and pointer
		- int values[100];//values is also pointer
		  int *valuesPtr;
		  valuesPtr=value /// value is array 

	Pointer and arithemetic 
		- to passe an array to function argument we use pointer ==> int array(int *array , const int n);

    - in function we call by refernce
	- in function we can retunr pointer 

Dynamic allocation#################
 
		- 




##Structur 

struct date{
int month;
int day;
int year;
};		

/*Declaration of of variable */
struct date today 

we can declare variable in the same time

			struct date{
			int month;
			int day;
			int year;
			}today;

			- array of structure 

			struct date myDate[10]

			example of use 
			myDate[1].month =8
			
initializing an array of of structure 

struct date myDates[5]={{12,10,1985},
						{12,30,1980},
						{11,15,2005},
						};
						
						
netsted structure   
			example :
			
			struct dateAndTime{
				struct date sdate;
				struct time stime;
				};

#structure and pointer 
  we can't passe structure as argument we use pointer of structure 
  strcut date *datePtr; // decalarion of structure pointer 
  
  datePtr =&todayDate;
  (*datePtr).day=21;     // parentheses are required 
  
  special operator for deferencer
  
  (*x).y   <===> x->y


#structure contain pointer
		str intPtr{
			int *p1;
			int *p2;
		}
		
			
			
		
			
	
	
	
	
	
	
	









 